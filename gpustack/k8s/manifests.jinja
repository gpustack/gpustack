# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: gpustack-system-{{ config.cluster_suffix }}
---
# Secret
apiVersion: v1
kind: Secret
metadata:
  name: registration-token
  namespace: gpustack-system-{{ config.cluster_suffix }}
type: Opaque
data:
  token: {{ config.token | b64encode }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-cm-creator
rules:
  - apiGroups: [""]
    resources: ["pods", "configmaps"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "watch"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: gpustack-system-{{ config.cluster_suffix }}
  name: gpustack-worker
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: gpustack-system-{{ config.cluster_suffix }}
  name: pod-cm-creator
subjects:
- kind: ServiceAccount
  name: gpustack-worker
  namespace: gpustack-system-{{ config.cluster_suffix }}
roleRef:
  kind: ClusterRole
  name: pod-cm-creator
  apiGroup: rbac.authorization.k8s.io
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: worker
  namespace: gpustack-system-{{ config.cluster_suffix }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "10151"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app: gpustack-worker
  ports:
    - name: gateway
      port: 8080
      targetPort: 8080
    - name: api
      port: 10150
      targetPort: 10150
    - name: metrics
      port: 10151
      targetPort: 10151
---
# DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: gpustack-worker
  name: gpustack-worker
  namespace: gpustack-system-{{ config.cluster_suffix }}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: gpustack-worker
  template:
    metadata:
      labels:
        app: gpustack-worker
    spec:
      containers:
        - env:
            - name: GPUSTACK_REGISTRATION_TOKEN
              valueFrom:
                secretKeyRef:
                  key: token
                  name: registration-token
            - name: GPUSTACK_SERVER_URL
              value: {{ config.server_url }}
            - name: GPUSTACK_PORT
              value: '8080'
          image: {{ config.image }}
          imagePullPolicy: IfNotPresent
          name: gpustack-worker
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities: {}
            privileged: true
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: gpustack-data-dir
              mountPath: /var/lib/gpustack
          ports:
            - name: gateway
              containerPort: 8080
              protocol: TCP
            - name: api
              containerPort: 10150
              protocol: TCP
            - name: metrics
              containerPort: 10151
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: api
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /healthz
              port: api
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 5
            successThreshold: 1
      volumes:
        - name: gpustack-data-dir
          hostPath:
            path: /var/lib/gpustack
            type: DirectoryOrCreate
      hostNetwork: true
      hostIPC: true
      serviceAccountName: gpustack-worker
  updateStrategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
